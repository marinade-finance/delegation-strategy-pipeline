name: Prepare Scoring

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger_scoring]

jobs: 
  scoring:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - uses: r-lib/actions/setup-r@v2

    - name: Set and send start timestamp
      run: |
        start_timestamp=$(date +%s)
        curl -sLfS "https://validators-api-dev.marinade.finance/admin/metrics?prepare_scoring_pending=true&prepare_scoring_start=$start_timestamp" -X POST \
          -H "Authorization: ${{ secrets.VALIDATORS_API_ADMIN_TOKEN }}"

    - name: Install packages
      run: |
        bash -c "$(curl -sSfL https://raw.githubusercontent.com/marinade-finance/delegation-strategy-2/master/scripts/scoring-install.bash)"

    - name: Prepare target directory
      run: |
        epoch_info=$(curl -sfLS "http://api.mainnet-beta.solana.com" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getEpochInfo"}')
        current_epoch=$(<<<"$epoch_info" jq '.result.epoch' -r)
        slot_index=$(<<<"$epoch_info" jq '.result.slotIndex' -r)

        scoring_id="$current_epoch.$slot_index"
        echo "scoring_id=$scoring_id" >> $GITHUB_ENV

        scoring_path="scoring/$scoring_id"
        echo "scoring_path=$scoring_path" >> $GITHUB_ENV

        mkdir -p "$scoring_path"

        curl -sLfS "https://validators-api-dev.marinade.finance/admin/metrics?epoch=$current_epoch&epoch_slot_current=$slot_index&prepare_scoring_pending=true" -X POST \
          -H "Authorization: ${{ secrets.VALIDATORS_API_ADMIN_TOKEN }}"

    - name: Load Data
      run: |
        cd "${{ env.scoring_path }}"
        bash -c "$(curl -sSfL https://raw.githubusercontent.com/marinade-finance/delegation-strategy-2/master/scripts/scoring-fetch-inputs.bash)"

    - name: Score
      run: |
        cd "${{ env.scoring_path }}"
        export SCORING_R=$(mktemp)
        wget https://raw.githubusercontent.com/marinade-finance/delegation-strategy-2/master/scripts/scoring.R -O "$SCORING_R"
        bash -c "$(curl -sSfL https://raw.githubusercontent.com/marinade-finance/delegation-strategy-2/master/scripts/scoring-run.bash)"

        if ! [[ -f scores.csv ]]
        then
          echo "Scores file was not produced!"
          stop_timestamp=$(date +%s)
          curl -sLfS "https://validators-api-dev.marinade.finance/admin/metrics?job_failed=true&prepare_scoring_end=$stop_timestamp" -X POST \
            -H "Authorization: ${{ secrets.VALIDATORS_API_ADMIN_TOKEN }}"
          exit 1
        fi

    - name: Make a Pull Request
      run: |
        scoring_id=${{ env.scoring_id }}
        scoring_branch="scoring/$scoring_id"

        git config --global user.name 'Autonomous Scoring Pipeline'
        git config --global user.email 'bot@noreply.marinade.finance'
        git checkout -b "$scoring_branch"
        git add .
        ! [ -z "$(git status --porcelain)" ] && git commit -m "scoring run $scoring_id" && git push -u origin "$scoring_branch" || echo "No changes to be committed"

        gh pr create -B master -H "$scoring_branch" --title "Publish Scoring Results ($scoring_id)" --body 'Auto-generated PR with scoring results'
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  report_metrics:
    needs: scoring
    steps:
    - name: Update job status and stop timestamp
      run: |
        stop_timestamp=$(date +%s)
        curl -sLfS "https://validators-api-dev.marinade.finance/admin/metrics?job_succeded=true&prepare_scoring_end=$stop_timestamp" -X POST \
          -H "Authorization: ${{ secrets.VALIDATORS_API_ADMIN_TOKEN }}"